{
module Lexer

open System
open Microsoft.FSharp.Text.Lexing
open Parser

let lexemeAsString lexbuf = 
    LexBuffer<char>.LexemeString lexbuf
let keyword s =
    match s with
    | "print" -> PRINT
    | "if" -> IF
    | "else" -> ELSE
    | "true" 
    | "false" -> BOOL (bool.Parse(s)) 
    | "while" -> WHILE
    | _ -> ID s
}

rule Token = parse
    | [' ' '\t' '\r'] { Token lexbuf }
    | '0' | ['1'-'9']['0'-'9']* { NUM (Int32.Parse(lexemeAsString lexbuf))}
    | ['a'-'z''A'-'Z']+ { keyword (lexemeAsString lexbuf)}
    | '+' { PLUS }
    | '-' { MINUS }
    | '*' { TIMES }
    | '/' { DIVIDE }
	| '>' { GT }
	| '=' { EQ }
	| '<' { LT }
    | '(' { LPARN }
    | ')' { RPARN }
	| '{' { STARTBLOCK }
	| '}' { ENDBLOCK }
    | "<-" { DEFINE }
	| ';' { SEMICOLON }
    | eof { EOF }
    | _ {failwith "Lexer error: illigal symbol" }