// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

    open TinyLang2.AbstractSyntax

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | SEMICOLON
  | LPARN
  | RPARN
  | STARTBLOCK
  | ENDBLOCK
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | LT
  | GT
  | EQ
  | INVOKE
  | IF
  | WHILE
  | ELSE
  | FUNCTION
  | PRINT
  | DEFINE
  | ID of (string)
  | BOOL of (bool)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_SEMICOLON
    | TOKEN_LPARN
    | TOKEN_RPARN
    | TOKEN_STARTBLOCK
    | TOKEN_ENDBLOCK
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_EQ
    | TOKEN_INVOKE
    | TOKEN_IF
    | TOKEN_WHILE
    | TOKEN_ELSE
    | TOKEN_FUNCTION
    | TOKEN_PRINT
    | TOKEN_DEFINE
    | TOKEN_ID
    | TOKEN_BOOL
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Expr
    | NONTERM_Stmt

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | SEMICOLON  -> 1 
  | LPARN  -> 2 
  | RPARN  -> 3 
  | STARTBLOCK  -> 4 
  | ENDBLOCK  -> 5 
  | PLUS  -> 6 
  | MINUS  -> 7 
  | TIMES  -> 8 
  | DIVIDE  -> 9 
  | LT  -> 10 
  | GT  -> 11 
  | EQ  -> 12 
  | INVOKE  -> 13 
  | IF  -> 14 
  | WHILE  -> 15 
  | ELSE  -> 16 
  | FUNCTION  -> 17 
  | PRINT  -> 18 
  | DEFINE  -> 19 
  | ID _ -> 20 
  | BOOL _ -> 21 
  | NUM _ -> 22 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_SEMICOLON 
  | 2 -> TOKEN_LPARN 
  | 3 -> TOKEN_RPARN 
  | 4 -> TOKEN_STARTBLOCK 
  | 5 -> TOKEN_ENDBLOCK 
  | 6 -> TOKEN_PLUS 
  | 7 -> TOKEN_MINUS 
  | 8 -> TOKEN_TIMES 
  | 9 -> TOKEN_DIVIDE 
  | 10 -> TOKEN_LT 
  | 11 -> TOKEN_GT 
  | 12 -> TOKEN_EQ 
  | 13 -> TOKEN_INVOKE 
  | 14 -> TOKEN_IF 
  | 15 -> TOKEN_WHILE 
  | 16 -> TOKEN_ELSE 
  | 17 -> TOKEN_FUNCTION 
  | 18 -> TOKEN_PRINT 
  | 19 -> TOKEN_DEFINE 
  | 20 -> TOKEN_ID 
  | 21 -> TOKEN_BOOL 
  | 22 -> TOKEN_NUM 
  | 25 -> TOKEN_end_of_input
  | 23 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Expr 
    | 3 -> NONTERM_Expr 
    | 4 -> NONTERM_Expr 
    | 5 -> NONTERM_Expr 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Stmt 
    | 16 -> NONTERM_Stmt 
    | 17 -> NONTERM_Stmt 
    | 18 -> NONTERM_Stmt 
    | 19 -> NONTERM_Stmt 
    | 20 -> NONTERM_Stmt 
    | 21 -> NONTERM_Stmt 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 25 
let _fsyacc_tagOfErrorTerminal = 23

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | SEMICOLON  -> "SEMICOLON" 
  | LPARN  -> "LPARN" 
  | RPARN  -> "RPARN" 
  | STARTBLOCK  -> "STARTBLOCK" 
  | ENDBLOCK  -> "ENDBLOCK" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | EQ  -> "EQ" 
  | INVOKE  -> "INVOKE" 
  | IF  -> "IF" 
  | WHILE  -> "WHILE" 
  | ELSE  -> "ELSE" 
  | FUNCTION  -> "FUNCTION" 
  | PRINT  -> "PRINT" 
  | DEFINE  -> "DEFINE" 
  | ID _ -> "ID" 
  | BOOL _ -> "BOOL" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | LPARN  -> (null : System.Object) 
  | RPARN  -> (null : System.Object) 
  | STARTBLOCK  -> (null : System.Object) 
  | ENDBLOCK  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | INVOKE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | FUNCTION  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | DEFINE  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 15us; 65535us; 7us; 8us; 24us; 10us; 25us; 11us; 26us; 12us; 27us; 13us; 28us; 14us; 29us; 15us; 30us; 16us; 33us; 17us; 34us; 18us; 37us; 19us; 38us; 20us; 46us; 21us; 54us; 22us; 63us; 23us; 21us; 65535us; 0us; 2us; 7us; 31us; 24us; 31us; 25us; 31us; 26us; 31us; 27us; 31us; 28us; 31us; 29us; 31us; 30us; 31us; 33us; 32us; 34us; 31us; 37us; 31us; 38us; 31us; 44us; 39us; 46us; 31us; 48us; 40us; 51us; 41us; 54us; 31us; 56us; 42us; 63us; 31us; 64us; 43us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 19us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 17us; 1us; 1us; 3us; 2us; 14us; 15us; 1us; 3us; 1us; 4us; 1us; 5us; 8us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 1us; 5us; 8us; 6us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 8us; 6us; 7us; 7us; 8us; 9us; 10us; 11us; 12us; 8us; 6us; 7us; 8us; 8us; 9us; 10us; 11us; 12us; 8us; 6us; 7us; 8us; 9us; 9us; 10us; 11us; 12us; 8us; 6us; 7us; 8us; 9us; 10us; 10us; 11us; 12us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 11us; 12us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 12us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 14us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 15us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 16us; 9us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 18us; 19us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 20us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 21us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 2us; 13us; 17us; 3us; 13us; 17us; 17us; 2us; 13us; 17us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 16us; 2us; 17us; 17us; 3us; 17us; 18us; 19us; 2us; 17us; 18us; 2us; 17us; 20us; 2us; 17us; 21us; 1us; 17us; 2us; 18us; 19us; 2us; 18us; 19us; 2us; 18us; 19us; 2us; 18us; 19us; 2us; 18us; 19us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 13us; 15us; 17us; 19us; 28us; 30us; 39us; 48us; 57us; 66us; 75us; 84us; 93us; 102us; 111us; 120us; 129us; 139us; 148us; 157us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; 174us; 178us; 181us; 183us; 185us; 187us; 189us; 191us; 194us; 198us; 201us; 204us; 207us; 209us; 212us; 215us; 218us; 221us; 224us; 226us; 228us; 230us; 232us; 234us; 236us; 238us; 240us; 242us; 244us; 246us; 248us; 250us; 252us; |]
let _fsyacc_action_rows = 65
let _fsyacc_actionTableElements = [|5us; 32768us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 36us; 0us; 49152us; 2us; 32768us; 0us; 3us; 1us; 44us; 0us; 16385us; 2us; 16386us; 2us; 34us; 19us; 37us; 0us; 16387us; 0us; 16388us; 8us; 32768us; 2us; 7us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 4us; 21us; 6us; 22us; 5us; 8us; 32768us; 3us; 9us; 6us; 24us; 7us; 25us; 8us; 26us; 9us; 27us; 10us; 28us; 11us; 29us; 12us; 30us; 0us; 16389us; 5us; 16390us; 8us; 26us; 9us; 27us; 10us; 28us; 11us; 29us; 12us; 30us; 5us; 16391us; 8us; 26us; 9us; 27us; 10us; 28us; 11us; 29us; 12us; 30us; 3us; 16392us; 10us; 28us; 11us; 29us; 12us; 30us; 3us; 16393us; 10us; 28us; 11us; 29us; 12us; 30us; 7us; 16394us; 6us; 24us; 7us; 25us; 8us; 26us; 9us; 27us; 10us; 28us; 11us; 29us; 12us; 30us; 7us; 16395us; 6us; 24us; 7us; 25us; 8us; 26us; 9us; 27us; 10us; 28us; 11us; 29us; 12us; 30us; 7us; 16396us; 6us; 24us; 7us; 25us; 8us; 26us; 9us; 27us; 10us; 28us; 11us; 29us; 12us; 30us; 7us; 16397us; 6us; 24us; 7us; 25us; 8us; 26us; 9us; 27us; 10us; 28us; 11us; 29us; 12us; 30us; 8us; 32768us; 3us; 35us; 6us; 24us; 7us; 25us; 8us; 26us; 9us; 27us; 10us; 28us; 11us; 29us; 12us; 30us; 7us; 16399us; 6us; 24us; 7us; 25us; 8us; 26us; 9us; 27us; 10us; 28us; 11us; 29us; 12us; 30us; 7us; 16400us; 6us; 24us; 7us; 25us; 8us; 26us; 9us; 27us; 10us; 28us; 11us; 29us; 12us; 30us; 8us; 32768us; 3us; 47us; 6us; 24us; 7us; 25us; 8us; 26us; 9us; 27us; 10us; 28us; 11us; 29us; 12us; 30us; 8us; 32768us; 3us; 55us; 6us; 24us; 7us; 25us; 8us; 26us; 9us; 27us; 10us; 28us; 11us; 29us; 12us; 30us; 8us; 32768us; 5us; 64us; 6us; 24us; 7us; 25us; 8us; 26us; 9us; 27us; 10us; 28us; 11us; 29us; 12us; 30us; 8us; 32768us; 2us; 7us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 4us; 21us; 6us; 22us; 5us; 8us; 32768us; 2us; 7us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 4us; 21us; 6us; 22us; 5us; 8us; 32768us; 2us; 7us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 4us; 21us; 6us; 22us; 5us; 8us; 32768us; 2us; 7us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 4us; 21us; 6us; 22us; 5us; 8us; 32768us; 2us; 7us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 4us; 21us; 6us; 22us; 5us; 8us; 32768us; 2us; 7us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 4us; 21us; 6us; 22us; 5us; 8us; 32768us; 2us; 7us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 4us; 21us; 6us; 22us; 5us; 1us; 32768us; 1us; 33us; 1us; 16401us; 1us; 33us; 8us; 32768us; 2us; 7us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 4us; 21us; 6us; 22us; 5us; 8us; 32768us; 2us; 7us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 4us; 21us; 6us; 22us; 5us; 0us; 16398us; 1us; 32768us; 19us; 37us; 8us; 32768us; 2us; 7us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 4us; 21us; 6us; 22us; 5us; 8us; 32768us; 2us; 7us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 4us; 21us; 6us; 22us; 5us; 1us; 16401us; 1us; 44us; 2us; 32768us; 1us; 44us; 5us; 49us; 2us; 32768us; 1us; 44us; 5us; 52us; 2us; 32768us; 1us; 44us; 5us; 57us; 1us; 16405us; 1us; 44us; 5us; 32768us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 36us; 1us; 32768us; 2us; 46us; 8us; 32768us; 2us; 7us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 4us; 21us; 6us; 22us; 5us; 1us; 32768us; 4us; 48us; 5us; 32768us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 36us; 1us; 16403us; 16us; 50us; 1us; 32768us; 4us; 51us; 5us; 32768us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 36us; 0us; 16402us; 1us; 32768us; 2us; 54us; 8us; 32768us; 2us; 7us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 4us; 21us; 6us; 22us; 5us; 1us; 32768us; 4us; 56us; 5us; 32768us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 36us; 0us; 16404us; 1us; 32768us; 20us; 59us; 1us; 32768us; 2us; 60us; 1us; 32768us; 20us; 61us; 1us; 32768us; 3us; 62us; 1us; 32768us; 4us; 63us; 8us; 32768us; 2us; 7us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 4us; 21us; 6us; 22us; 5us; 5us; 32768us; 14us; 45us; 15us; 53us; 17us; 58us; 18us; 38us; 20us; 36us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 6us; 7us; 10us; 11us; 14us; 15us; 16us; 25us; 34us; 35us; 41us; 47us; 51us; 55us; 63us; 71us; 79us; 87us; 96us; 104us; 112us; 121us; 130us; 139us; 148us; 157us; 166us; 175us; 184us; 193us; 202us; 204us; 206us; 215us; 224us; 225us; 227us; 236us; 245us; 247us; 250us; 253us; 256us; 258us; 264us; 266us; 275us; 277us; 283us; 285us; 287us; 293us; 294us; 296us; 305us; 307us; 313us; 314us; 316us; 318us; 320us; 322us; 324us; 333us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 3us; 2us; 3us; 11us; 7us; 7us; 9us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 16388us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16398us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 221 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TinyLang2.AbstractSyntax.Statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 230 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                                    _1 
                   )
# 27 "Parser.fsy"
                 : TinyLang2.AbstractSyntax.Statement));
# 241 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                              Id _1 
                   )
# 30 "Parser.fsy"
                 : 'Expr));
# 252 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                 Num _1 
                   )
# 31 "Parser.fsy"
                 : 'Expr));
# 263 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                               Bool _1 
                   )
# 32 "Parser.fsy"
                 : 'Expr));
# 274 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                              _2 
                   )
# 33 "Parser.fsy"
                 : 'Expr));
# 285 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                            Prim("+", _1, _3) 
                   )
# 34 "Parser.fsy"
                 : 'Expr));
# 297 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                             Prim("-", _1, _3) 
                   )
# 35 "Parser.fsy"
                 : 'Expr));
# 309 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                             Prim("*", _1, _3) 
                   )
# 36 "Parser.fsy"
                 : 'Expr));
# 321 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                           Prim("/", _1, _3) 
                   )
# 37 "Parser.fsy"
                 : 'Expr));
# 333 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                       Prim("<", _1, _3) 
                   )
# 38 "Parser.fsy"
                 : 'Expr));
# 345 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                       Prim(">", _1, _3) 
                   )
# 39 "Parser.fsy"
                 : 'Expr));
# 357 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                       Prim("=", _1, _3) 
                   )
# 40 "Parser.fsy"
                 : 'Expr));
# 369 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                                 EseqExpr(_1, _3) 
                   )
# 41 "Parser.fsy"
                 : 'Expr));
# 381 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                              Invoke(_1, _3) 
                   )
# 42 "Parser.fsy"
                 : 'Expr));
# 393 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                           Definition(_1, _3) 
                   )
# 45 "Parser.fsy"
                 : 'Stmt));
# 405 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                     PrintStm(_2) 
                   )
# 46 "Parser.fsy"
                 : 'Stmt));
# 416 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                              CompoundStm (_1, _3) 
                   )
# 47 "Parser.fsy"
                 : 'Stmt));
# 428 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                                                                        IfElseStm(_3, _6, _10) 
                   )
# 48 "Parser.fsy"
                 : 'Stmt));
# 441 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                                       IfStm(_3, _6) 
                   )
# 49 "Parser.fsy"
                 : 'Stmt));
# 453 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                                          WhileStm(_3, _6) 
                   )
# 50 "Parser.fsy"
                 : 'Stmt));
# 465 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                                                      FunDefinition (_2, _4, _7, _9) 
                   )
# 51 "Parser.fsy"
                 : 'Stmt));
|]
# 480 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 26;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : TinyLang2.AbstractSyntax.Statement =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
