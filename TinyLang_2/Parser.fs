// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

    open TinyLang2.AbstractSyntax

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | SEMICOLON
  | LPARN
  | RPARN
  | STARTBLOCK
  | ENDBLOCK
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | LT
  | GT
  | EQ
  | IF
  | WHILE
  | ELSE
  | PRINT
  | DEFINE
  | ID of (string)
  | BOOL of (bool)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_SEMICOLON
    | TOKEN_LPARN
    | TOKEN_RPARN
    | TOKEN_STARTBLOCK
    | TOKEN_ENDBLOCK
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_EQ
    | TOKEN_IF
    | TOKEN_WHILE
    | TOKEN_ELSE
    | TOKEN_PRINT
    | TOKEN_DEFINE
    | TOKEN_ID
    | TOKEN_BOOL
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Expr
    | NONTERM_Stmt

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | SEMICOLON  -> 1 
  | LPARN  -> 2 
  | RPARN  -> 3 
  | STARTBLOCK  -> 4 
  | ENDBLOCK  -> 5 
  | PLUS  -> 6 
  | MINUS  -> 7 
  | TIMES  -> 8 
  | DIVIDE  -> 9 
  | LT  -> 10 
  | GT  -> 11 
  | EQ  -> 12 
  | IF  -> 13 
  | WHILE  -> 14 
  | ELSE  -> 15 
  | PRINT  -> 16 
  | DEFINE  -> 17 
  | ID _ -> 18 
  | BOOL _ -> 19 
  | NUM _ -> 20 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_SEMICOLON 
  | 2 -> TOKEN_LPARN 
  | 3 -> TOKEN_RPARN 
  | 4 -> TOKEN_STARTBLOCK 
  | 5 -> TOKEN_ENDBLOCK 
  | 6 -> TOKEN_PLUS 
  | 7 -> TOKEN_MINUS 
  | 8 -> TOKEN_TIMES 
  | 9 -> TOKEN_DIVIDE 
  | 10 -> TOKEN_LT 
  | 11 -> TOKEN_GT 
  | 12 -> TOKEN_EQ 
  | 13 -> TOKEN_IF 
  | 14 -> TOKEN_WHILE 
  | 15 -> TOKEN_ELSE 
  | 16 -> TOKEN_PRINT 
  | 17 -> TOKEN_DEFINE 
  | 18 -> TOKEN_ID 
  | 19 -> TOKEN_BOOL 
  | 20 -> TOKEN_NUM 
  | 23 -> TOKEN_end_of_input
  | 21 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Expr 
    | 3 -> NONTERM_Expr 
    | 4 -> NONTERM_Expr 
    | 5 -> NONTERM_Expr 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Stmt 
    | 14 -> NONTERM_Stmt 
    | 15 -> NONTERM_Stmt 
    | 16 -> NONTERM_Stmt 
    | 17 -> NONTERM_Stmt 
    | 18 -> NONTERM_Stmt 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 23 
let _fsyacc_tagOfErrorTerminal = 21

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | SEMICOLON  -> "SEMICOLON" 
  | LPARN  -> "LPARN" 
  | RPARN  -> "RPARN" 
  | STARTBLOCK  -> "STARTBLOCK" 
  | ENDBLOCK  -> "ENDBLOCK" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | EQ  -> "EQ" 
  | IF  -> "IF" 
  | WHILE  -> "WHILE" 
  | ELSE  -> "ELSE" 
  | PRINT  -> "PRINT" 
  | DEFINE  -> "DEFINE" 
  | ID _ -> "ID" 
  | BOOL _ -> "BOOL" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | LPARN  -> (null : System.Object) 
  | RPARN  -> (null : System.Object) 
  | STARTBLOCK  -> (null : System.Object) 
  | ENDBLOCK  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | DEFINE  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 12us; 65535us; 7us; 8us; 21us; 10us; 22us; 11us; 23us; 12us; 24us; 13us; 25us; 14us; 26us; 15us; 27us; 16us; 29us; 17us; 30us; 18us; 37us; 19us; 45us; 20us; 5us; 65535us; 0us; 2us; 35us; 31us; 39us; 32us; 42us; 33us; 47us; 34us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 16us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 15us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 8us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 1us; 5us; 8us; 6us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 8us; 6us; 7us; 7us; 8us; 9us; 10us; 11us; 12us; 8us; 6us; 7us; 8us; 8us; 9us; 10us; 11us; 12us; 8us; 6us; 7us; 8us; 9us; 9us; 10us; 11us; 12us; 8us; 6us; 7us; 8us; 9us; 10us; 10us; 11us; 12us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 11us; 12us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 12us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 14us; 9us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 16us; 17us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 18us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 2us; 15us; 15us; 3us; 15us; 16us; 17us; 2us; 15us; 16us; 2us; 15us; 18us; 1us; 15us; 2us; 16us; 17us; 2us; 16us; 17us; 2us; 16us; 17us; 2us; 16us; 17us; 2us; 16us; 17us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 13us; 15us; 17us; 26us; 28us; 37us; 46us; 55us; 64us; 73us; 82us; 91us; 100us; 109us; 119us; 128us; 130us; 132us; 134us; 136us; 138us; 140us; 142us; 144us; 146us; 148us; 151us; 155us; 158us; 161us; 163us; 166us; 169us; 172us; 175us; 178us; 180us; 182us; 184us; 186us; 188us; 190us; 192us; |]
let _fsyacc_action_rows = 49
let _fsyacc_actionTableElements = [|4us; 32768us; 13us; 36us; 14us; 44us; 16us; 30us; 18us; 28us; 0us; 49152us; 2us; 32768us; 0us; 3us; 1us; 35us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 4us; 32768us; 2us; 7us; 18us; 4us; 19us; 6us; 20us; 5us; 8us; 32768us; 3us; 9us; 6us; 21us; 7us; 22us; 8us; 23us; 9us; 24us; 10us; 25us; 11us; 26us; 12us; 27us; 0us; 16389us; 5us; 16390us; 8us; 23us; 9us; 24us; 10us; 25us; 11us; 26us; 12us; 27us; 5us; 16391us; 8us; 23us; 9us; 24us; 10us; 25us; 11us; 26us; 12us; 27us; 3us; 16392us; 10us; 25us; 11us; 26us; 12us; 27us; 3us; 16393us; 10us; 25us; 11us; 26us; 12us; 27us; 7us; 16394us; 6us; 21us; 7us; 22us; 8us; 23us; 9us; 24us; 10us; 25us; 11us; 26us; 12us; 27us; 7us; 16395us; 6us; 21us; 7us; 22us; 8us; 23us; 9us; 24us; 10us; 25us; 11us; 26us; 12us; 27us; 7us; 16396us; 6us; 21us; 7us; 22us; 8us; 23us; 9us; 24us; 10us; 25us; 11us; 26us; 12us; 27us; 7us; 16397us; 6us; 21us; 7us; 22us; 8us; 23us; 9us; 24us; 10us; 25us; 11us; 26us; 12us; 27us; 7us; 16398us; 6us; 21us; 7us; 22us; 8us; 23us; 9us; 24us; 10us; 25us; 11us; 26us; 12us; 27us; 8us; 32768us; 3us; 38us; 6us; 21us; 7us; 22us; 8us; 23us; 9us; 24us; 10us; 25us; 11us; 26us; 12us; 27us; 8us; 32768us; 3us; 46us; 6us; 21us; 7us; 22us; 8us; 23us; 9us; 24us; 10us; 25us; 11us; 26us; 12us; 27us; 4us; 32768us; 2us; 7us; 18us; 4us; 19us; 6us; 20us; 5us; 4us; 32768us; 2us; 7us; 18us; 4us; 19us; 6us; 20us; 5us; 4us; 32768us; 2us; 7us; 18us; 4us; 19us; 6us; 20us; 5us; 4us; 32768us; 2us; 7us; 18us; 4us; 19us; 6us; 20us; 5us; 4us; 32768us; 2us; 7us; 18us; 4us; 19us; 6us; 20us; 5us; 4us; 32768us; 2us; 7us; 18us; 4us; 19us; 6us; 20us; 5us; 4us; 32768us; 2us; 7us; 18us; 4us; 19us; 6us; 20us; 5us; 1us; 32768us; 17us; 29us; 4us; 32768us; 2us; 7us; 18us; 4us; 19us; 6us; 20us; 5us; 4us; 32768us; 2us; 7us; 18us; 4us; 19us; 6us; 20us; 5us; 1us; 16399us; 1us; 35us; 2us; 32768us; 1us; 35us; 5us; 40us; 2us; 32768us; 1us; 35us; 5us; 43us; 2us; 32768us; 1us; 35us; 5us; 48us; 4us; 32768us; 13us; 36us; 14us; 44us; 16us; 30us; 18us; 28us; 1us; 32768us; 2us; 37us; 4us; 32768us; 2us; 7us; 18us; 4us; 19us; 6us; 20us; 5us; 1us; 32768us; 4us; 39us; 4us; 32768us; 13us; 36us; 14us; 44us; 16us; 30us; 18us; 28us; 1us; 16401us; 15us; 41us; 1us; 32768us; 4us; 42us; 4us; 32768us; 13us; 36us; 14us; 44us; 16us; 30us; 18us; 28us; 0us; 16400us; 1us; 32768us; 2us; 45us; 4us; 32768us; 2us; 7us; 18us; 4us; 19us; 6us; 20us; 5us; 1us; 32768us; 4us; 47us; 4us; 32768us; 13us; 36us; 14us; 44us; 16us; 30us; 18us; 28us; 0us; 16402us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 9us; 10us; 11us; 12us; 13us; 18us; 27us; 28us; 34us; 40us; 44us; 48us; 56us; 64us; 72us; 80us; 88us; 97us; 106us; 111us; 116us; 121us; 126us; 131us; 136us; 141us; 143us; 148us; 153us; 155us; 158us; 161us; 164us; 169us; 171us; 176us; 178us; 183us; 185us; 187us; 192us; 193us; 195us; 200us; 202us; 207us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; 11us; 7us; 7us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 16388us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 65535us; 16402us; |]
let _fsyacc_reductions ()  =    [| 
# 206 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TinyLang2.AbstractSyntax.Statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 215 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "Parser.fsy"
                                    _1 
                   )
# 26 "Parser.fsy"
                 : TinyLang2.AbstractSyntax.Statement));
# 226 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                              Id _1 
                   )
# 29 "Parser.fsy"
                 : 'Expr));
# 237 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                 Num _1 
                   )
# 30 "Parser.fsy"
                 : 'Expr));
# 248 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                               Bool _1 
                   )
# 31 "Parser.fsy"
                 : 'Expr));
# 259 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                              _2 
                   )
# 32 "Parser.fsy"
                 : 'Expr));
# 270 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                            Prim("+", _1, _3) 
                   )
# 33 "Parser.fsy"
                 : 'Expr));
# 282 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                             Prim("-", _1, _3) 
                   )
# 34 "Parser.fsy"
                 : 'Expr));
# 294 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                             Prim("*", _1, _3) 
                   )
# 35 "Parser.fsy"
                 : 'Expr));
# 306 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                           Prim("/", _1, _3) 
                   )
# 36 "Parser.fsy"
                 : 'Expr));
# 318 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                       Prim("<", _1, _3) 
                   )
# 37 "Parser.fsy"
                 : 'Expr));
# 330 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                       Prim(">", _1, _3) 
                   )
# 38 "Parser.fsy"
                 : 'Expr));
# 342 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                       Prim("=", _1, _3) 
                   )
# 39 "Parser.fsy"
                 : 'Expr));
# 354 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                           Definition(_1, _3) 
                   )
# 42 "Parser.fsy"
                 : 'Stmt));
# 366 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                     PrintStm(_2) 
                   )
# 43 "Parser.fsy"
                 : 'Stmt));
# 377 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                              CompoundStm (_1, _3) 
                   )
# 44 "Parser.fsy"
                 : 'Stmt));
# 389 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                                                                        IfElseStm(_3, _6, _10) 
                   )
# 45 "Parser.fsy"
                 : 'Stmt));
# 402 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                                       IfStm(_3, _6) 
                   )
# 46 "Parser.fsy"
                 : 'Stmt));
# 414 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                                          WhileStm(_3, _6) 
                   )
# 47 "Parser.fsy"
                 : 'Stmt));
|]
# 427 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 24;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : TinyLang2.AbstractSyntax.Statement =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
