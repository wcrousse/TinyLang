%{
    open TinyLang2.AbstractSyntax
%}

%token <int> NUM
%token <bool> BOOL
%token <string> ID
%token DEFINE
%token PRINT
%token IF WHILE ELSE
%token PLUS MINUS TIMES DIVIDE LT GT EQ
%token LPARN RPARN STARTBLOCK ENDBLOCK
%token SEMICOLON
%token EOF

%right SEMICOLON
%left MINUS PLUS
%left TIMES DIVIDE

%start Main
%type <TinyLang2.AbstractSyntax.Statement> Main

%%

Main:
    Stmt EOF { $1 }

Expr:
    ID { Id $1 }
    | NUM { Num $1 }
	| BOOL { Bool $1 }
    | LPARN Expr RPARN { $2 }
    | Expr PLUS Expr { Prim("+", $1, $3) }
    | Expr MINUS Expr { Prim("-", $1, $3) }
    | Expr TIMES Expr { Prim("*", $1, $3) }
	| Expr DIVIDE Expr { Prim("/", $1, $3) }
	| Expr LT Expr { Prim("<", $1, $3) }
	| Expr GT Expr { Prim(">", $1, $3) }
	| Expr EQ Expr { Prim("=", $1, $3) }

Stmt: 
    ID DEFINE Expr  { Definition($1, $3) }
	| PRINT Expr { PrintStm($2) }
	| Stmt SEMICOLON Stmt { CompoundStm ($1, $3) }
    | IF LPARN Expr RPARN STARTBLOCK Stmt ENDBLOCK ELSE STARTBLOCK Stmt ENDBLOCK { IfElseStm($3, $6, $10) }
	| IF LPARN Expr RPARN STARTBLOCK Stmt ENDBLOCK { IfStm($3, $6) }
	| WHILE LPARN Expr RPARN STARTBLOCK Stmt ENDBLOCK { WhileStm($3, $6) }
